Mind Map generated by NB MindMap plugin   
> __version__=`1.1`
---

# Monad\(functor\)

## 0\.解决了什么问题

### functor允许我们忽略某些复杂性的条件下的Sequence computations

### 但是Functor只允许某种复杂性在Sequence computation出现一次，如果<br/>每次出现，那么functor就无能为力

### Monad解决了这种局限

#### Monad的flatMap会处理每次计算设计的复杂性

##### eg:Option的flatmap将中间的option考虑在内

## 1\.Monad定义

### pure函数

#### A=\>F\[A\]

##### 是对constructor的进一步抽象，创建一个monastic context

### flatMap函数

#### （F\[A\],A=\>F\[B\]\)=\>F\[B\]

##### 从monadic中提取值，产生一个新的monadic context

## 2\.Monad法则
> leftSide=`true`


### left 和 right是pure相对flatmap的位置

### Left Identity

#### Calling pure and transforming the result with f is the same as calling f

#### pure\(x\)\.flatmap\(f\)==f\(x\)

### Right Identity
> leftSide=`true`


#### Passing pure to flatMap is the same as doing nothing

#### m\.flatmap\.\(pure\)==m
> leftSide=`true`


### Associatity
> leftSide=`true`


#### flatMapping over two functions f and g is the same as flatMapping over f and then flatMapping over g

#### m\.flatmap\(f\)\.flatmap\(g\)==m\.flatmap\(x=\>f\(x\)\.flatmap\(g\)\)
> leftSide=`true`


## 3\.Monad in Cats
> leftSide=`true`


### extend FlatMap

#### 获得flatmap函数

### extend Applicative
> leftSide=`true`


#### 获得pure函数
